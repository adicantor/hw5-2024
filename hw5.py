import json
import numpy as np
import pandas as pd
import pathlib
import re
from typing import Union, Tuple

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        if isinstance(data_fname, str):
            data_fname = pathlib.Path(data_fname)
        if not data_fname.exists():
            raise ValueError(f"File {data_fname} does not exist.")
        self.data_fname = data_fname
        self.data = None

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        with open(self.data_fname, 'r') as file:
            self.data = pd.json_normalize(json.load(file))

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
          Number of people in a given bin
        bins : np.ndarray
          Bin edges
        """
        ages = pd.to_numeric(self.data['age'], errors='coerce').dropna().astype(int)
        bins = np.arange(0, 101, 10)
        hist, _ = np.histogram(ages, bins=bins)
        
        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
          A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
          the (ordinal) index after a reset.
        """
        def is_valid_email(email):
            if isinstance(email, str):
                if email.count('@') == 1 and email.count('.') > 0:
                    local, domain = email.split('@')
                    if local and domain and not domain.startswith('.') and '.' in domain:
                        return True
            return False
        
        valid_data = self.data[self.data['email'].apply(is_valid_email)].reset_index(drop=True)
        
        return valid_data

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
          The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
          Row indices of the students that their new grades were generated
        """
        df = self.data.copy()
        missing_indices = []

        # Iterate over rows to replace NaN values
        for index, row in df.iterrows():
            grades_cols = [col for col in row.index if 'grade' in col]
            grades = row[grades_cols]
            
            # Check if there are NaNs in the grades columns
            if grades.isna().any():
                non_nan_grades = grades.dropna()
                if not non_nan_grades.empty:
                    mean_grade = non_nan_grades.mean()
                    df.loc[index, grades.isna()] = mean_grade
                    missing_indices.append(index)
        
        return df, np.array(missing_indices)

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        df = self.data.copy()
        scores = []

        for index, row in df.iterrows():
            grades = row.loc[row.index.str.contains('grade')].values
            nans = np.isnan(grades)
            
            if np.sum(nans) > maximal_nans_per_sub:
                scores.append(pd.NA)
            else:
                mean_score = np.nanmean(grades)
                scores.append(np.floor(mean_score).astype(np.uint8))
        
        df['score'] = pd.Series(scores, dtype=pd.UInt8Dtype())
        return df
    
    def correlate_gender_age(self) -> pd.DataFrame:
        """Calculates the correlation between gender and age.

        Returns
        -------
        pd.DataFrame
            A DataFrame with the correlation between 'gender' and 'age'.
        """
        if 'gender' not in self.data.columns or 'age' not in self.data.columns:
            raise ValueError("DataFrame must contain 'gender' and 'age' columns for correlation.")

        # Pivot table to get mean age by gender
        correlation = self.data.groupby(['gender', 'age']).size().unstack(fill_value=0).corr().reset_index()

        return correlation
