import json
import numpy as np
import pandas as pd
import pathlib
from typing import Union, Tuple

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        if isinstance(data_fname, str):
            data_fname = pathlib.Path(data_fname)
        if not data_fname.exists():
            raise ValueError(f"File {data_fname} does not exist.")
        self.data_fname = data_fname
        self.data = None

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        with open(self.data_fname, 'r') as file:
            self.data = pd.json_normalize(json.load(file))

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
          Number of people in a given bin
        bins : np.ndarray
          Bin edges
        """
        ages = pd.to_numeric(self.data['age'], errors='coerce').dropna().astype(int)
        bins = np.arange(0, 101, 10)
        hist, _ = np.histogram(ages, bins=bins)
        
        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
          A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
          the (ordinal) index after a reset.
        """
        def is_valid_email(email):
            if isinstance(email, str):
                if email.count('@') == 1 and email.count('.') > 0:
                    local, domain = email.split('@')
                    if local and domain and not domain.startswith('.') and '.' in domain:
                        return True
            return False
        
        valid_data = self.data[self.data['email'].apply(is_valid_email)].reset_index(drop=True)
        
        return valid_data

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
        The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
        Row indices of the students that their new grades were generated
        """
        # Make a copy of the original data to modify
        df = self.data.copy()
        # Identify columns that contain grades (assuming they are all columns except 'age' and 'email')
        grade_columns = [col for col in df.columns if col not in ['age', 'email', "id", "first_name", "last_name", "timestamp", "gender"]]
        # Initialize a list to track rows that were corrected
        corrected_rows = []
        # Iterate over rows in the DataFrame
        for idx, row in df.iterrows():
            # Get the grades for the current row
            grades = row[grade_columns]
            
            # Check if there are missing values
            
            somethingIsNan = False
            nanIndices = []
            
            grades.replace('nan', np.nan, inplace=True)
                
            if grades.isnull().any():
                # Calculate the mean of non-missing grades
                mean_grade = grades.dropna().mean()
                
                # Replace NaN values with the mean
                df.loc[idx, grade_columns] = grades.fillna(mean_grade)
                # Append the index of the corrected row
                corrected_rows.append(idx)
        
        # Convert the list of corrected row indices to a numpy array
        corrected_indices = np.array(corrected_rows)
        
        return df, corrected_indices


    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        # Create a copy of the original data to avoid modifying it directly
        # df = self.data.copy()
        
        # Assuming grades start from the second column
        # grade_columns = df.columns[1:]
        
        # def calculate_score(grades):
        #     nan_count = grades.isna().sum()
        #     if nan_count > maximal_nans_per_sub:
        #         return np.nan
        #     else:
        #         mean_grade = grades.mean()
        #         return np.floor(mean_grade).astype(np.uint8)
        
        # df['score'] = df[grade_columns].apply(calculate_score, axis=1)
        # return df

        # Make a copy of the original data to modify
        df = self.data.copy()
        # Identify columns that contain grades (assuming they are all columns except 'age' and 'email')
        grade_columns = [col for col in df.columns if col not in ['age', 'email', "id", "first_name", "last_name", "timestamp", "gender"]]
        # Initialize a list to track rows that were corrected
        corrected_rows = []
        # Iterate over rows in the DataFrame
        df['score'] = pd.Series(dtype='UInt8')
        

        score = None
        for idx, row in df.iterrows():
            # Get the grades for the current row
            grades = row[grade_columns]
            
            # Check if there are missing values
            grades.replace('nan', np.nan, inplace=True)
            grades_no_na = grades.dropna()
            if len(grades_no_na) < len(grade_columns) - maximal_nans_per_sub:
                #score = pd.NA
                continue
            else:
                # Calculate mean, round down, and convert to UInt8
                score = np.floor(grades_no_na.mean()).astype(np.uint8)
            
            
            df.loc[idx, 'score'] = score
            print(str(idx) + ", " + str(df.loc[idx, 'score']))
        
        return df

qa = QuestionnaireAnalysis("/Users/adicantor/Documents/sagol courses/sagol_python_24/hw5-2024/data.json")
qa.read_data()
qa.score_subjects()